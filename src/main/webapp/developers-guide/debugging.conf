

h1. Troubleshooting, Debugging and Profiling

h2. Troubleshooting

h3. Logging

Logging is easy to control through the console, with commands grouped under _log_ shell. To learn about the available logging commands type:

{code}
karaf@root> log<tab>

log:display              log:display-exception    log:get                  log:set
karaf@root>
{code}

Typical usage is:
 
 # Use {{log:set}} to dynamically change the global log level
 # Execute the problematic operation
 # Use {{log:display}} (or {{log:display-exception}} to display the log 

 

h3. Worst Case Scenario

If you end up with a Karaf in a really bad state (i.e. you can not boot it anymore) or you just want to revert to a clean state quickly, you can safely remove the {{data}} directory just in the installation directory.  This folder contains transient data and will be recreated if you remove it and relaunch Karaf.
You may also want to remove the files in the {{deploy}} folder to avoid them being automatically installed when Karaf is started the first time.

h2. Debugging

Usually, the easiest way to debug Karaf or any application deployed onto it is to use remote debugging.
Remote debugging can be easily activated by setting the {{KARAF_DEBUG}} environment variable to {{TRUE}}.

This can be done using the following command on Unix systems:
{noformat}
export KARAF_DEBUG=true
{noformat}

On Windows, use the following command
{noformat}
set KARAF_DEBUG=true
{noformat}

Then, you can launch Karaf using the usual way:
{noformat}
bin/karaf
{noformat}
or
{noformat}
bin\karaf.bat
{noformat}

Last, inside your IDE, connect to the remote application (the default port to connect to is 5005).

This option works fine when we have to debug a project deployed top of Apache Karaf. Nervertheless, you will be blocked if you would like to debug the server Karaf. In this case, you can change the following parameter suspend=y in the karaf.bat script file. That will cause the JVM to pause just before running main() until you attach a debugger then it will resume the execution.  This way you can set
your breakpoints anywhere in the code and you should hit them no matter how early in the startup they are  

{code}
export DEFAULT_JAVA_DEBUG_OPTS='-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005'
{code}
and on Windows,
{code}
set DEFAULT_JAVA_DEBUG_OPTS='-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005'
{code}



h2. Profiling

h3. YourKit

You need a few steps to be able to profile Karaf using YourKit.
The first one is to edit the {{etc/config.properties}} configuration file and add the following property:
{noformat}
org.osgi.framework.bootdelegation=com.yourkit.*
{noformat}

Then, set the {{JAVA_OPTS}} environment variable:
{noformat}
export JAVA_OPTS='-Xmx512M -agentlib:yjpagent'
{noformat}

or, on Windows

{noformat}
set JAVA_OPTS='-Xmx512M -agentlib:yjpagent'
{noformat}

Run Karaf from the console, and you should now be able to connect using YourKit standalone or from your favorite IDE.


